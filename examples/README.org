* Examples
** Getting started

~dsq~ source code blocks use the custom ~:input~ [[https://orgmode.org/manual/Using-Header-Arguments.html][header argument]] to specify
one or more data sources to query. Here's a basic example that queries a
list of people in a file called ~people.json~. Results are formatted as a
table with a header row by default (see below for other options).

#+begin_src org
,#+begin_src dsq :input people.json
SELECT * FROM {}
,#+end_src

#+RESULTS:
| id | name  |
|----+-------|
|  1 | Alice |
|  2 | Bob   |
#+end_src

** Variable expansion

[[https://orgmode.org/manual/Environment-of-a-Code-Block.html][Arguments]] can be passed to the source code block via ~:var FOO=BAR~ as
usual. ~dsq~ source code blocks replace occurrences of ~$FOO~ with ~BAR~
before its evaulation. For now, only literal values may be assigned to
variables.

#+begin_src org
,#+begin_src dsq :input people.json :var name="Alice"
SELECT * FROM {} WHERE name = '$name'
,#+end_src

#+RESULTS:
| id | name  |
|----+-------|
|  1 | Alice |
#+end_src

** ~:header~ and ~:hlines~ header arguments

Use ~:header yes~ (default) to include a header row in table results. Use
any other value to render the result without a header. This can be
useful for result types other than ~table~ (see below for other options).

#+begin_src org
,#+begin_src dsq :input people.json :header no
SELECT * FROM {}
,#+end_src

#+RESULTS:
| 1 | Alice |
| 2 | Bob   |
#+end_src

Use ~:hlines yes~ to include horizontal lines between rows in table
results. Use any other value to render the result without horizontal
rows (default).

#+begin_src org
,#+begin_src dsq :input people.json :hlines yes
SELECT * FROM {}
,#+end_src

#+RESULTS:
| id | name  |
|----+-------|
|  1 | Alice |
|----+-------|
|  2 | Bob   |
#+end_src

** Result types and formats

Org supports [[https://orgmode.org/manual/Results-of-Evaluation.html][a wide range of options]] to customize the formatting of the
results of a source code block execution. Here are two quick examples;
please see the docs for more details.

#+begin_src org
,#+begin_src dsq :input people.json :results list
SELECT * FROM {}
,#+end_src

#+RESULTS:
- ("id" "name")
- (1 "Alice")
- (2 "Bob")
#+end_src

#+begin_src org
,#+begin_src dsq :input people.json :results verbatim code
SELECT * FROM {}
,#+end_src

#+RESULTS:
,#+begin_src dsq
[{"id":1,"name":"Alice"},
{"id":2,"name":"Bob"}]
,#+end_src
#+end_src

** Querying multiple sources (files, with varying data types)

The ~:input~ header argument accepts one or more data sources. Here's an
example that runs a query across two input files with varying data types
(JSON and CSV).

#+begin_src org
,#+begin_src dsq :input people.json languages.csv
SELECT people.name AS name, languages.name AS language
FROM {0} people
INNER JOIN {1} languages ON  people.id = languages.person_id
,#+end_src

#+RESULTS:
| name  | language |
|-------+----------|
| Alice | Ruby     |
| Alice | Elisp    |
| Bob   | Python   |
#+end_src

** Querying Org references (in local or other files)

Besides regular files, and similar to [[https://orgmode.org/manual/Environment-of-a-Code-Block.html][the ~:var~ header argument]], the
~:input~ header argument also accepts references to Org tables, Org
quotes, Org source blocks, etc. Here's an example that runs a query on
an Org table named ~colors~.

#+begin_src org
#+name: colors
| person_id | name  |
|-----------+-------|
|         1 | Blue  |
|         2 | Red   |
|         2 | Green |

,#+begin_src dsq :input colors
SELECT name FROM {}
,#+end_src

#+RESULTS:
| name  |
|-------|
| Blue  |
| Red   |
| Green |
#+end_src

References may also be located in other files.

#+begin_src org
,#+begin_src dsq :input countries.org:countries
SELECT name FROM {}
,#+end_src

#+RESULTS:
| name        |
|-------------|
| Austria     |
| New Zealand |
#+end_src

Both references and regular files can be used as data sources in a
single ~dsq~ source block. ~ob-dsq~ transparently writes the data of each
reference to a temporary file for ~dsq~ to query.

#+begin_src org
,#+begin_src dsq :input people.json colors countries.org:countries
SELECT people.name AS name, colors.name AS color, countries.name AS country
FROM {0} people
INNER JOIN {1} colors ON  people.id = colors.person_id
INNER JOIN {2} countries ON  people.id = countries.person_id
,#+end_src

#+RESULTS:
| name  | color | country     |
|-------+-------+-------------|
| Alice | Blue  | Austria     |
| Bob   | Red   | New Zealand |
| Bob   | Green | New Zealand |
#+end_src

** Querying JSON data with irregular attributes

Queried objects in JSON data might contain "irregular" attributes. For
example, in an array of people objects, one object might specify a ~phone~
attribute, while another does not. In the query result, all attributes
found in the queried data will be flattened out and ~null~-ed where
needed.

#+begin_src org
,#+begin_src dsq :input irregular.json
SELECT * FROM {}
,#+end_src

#+RESULTS:
|  id | name  | newsletter | phone          |
|-----+-------+------------+----------------|
| 1.0 | Alice | false      | nil            |
| 2.0 | Bob   | nil        | 1-123-123-1234 |
#+end_src

** Customizing the rendering of ~null~ and ~false~ values

The rendering of ~null~ and ~false~ values can be customized using the
~:null-value~ and ~:false-value~ header arguments.

#+begin_src org
,#+begin_src dsq :input irregular.json :null-value "?" :false-value "nope"
SELECT * FROM {}
,#+end_src

#+RESULTS:
|  id | name  | newsletter | phone          |
|-----+-------+------------+----------------|
| 1.0 | Alice | nope       | ?              |
| 2.0 | Bob   | ?          | 1-123-123-1234 |
#+end_src

** Querying results of Org source blocks

Here's an example of a ~dsq~ source block querying the results of an Org
source block that downloads JSON data from an online API.

#+begin_src org
#+name: comments
,#+begin_src shell :results verbatim
curl https://jsonplaceholder.typicode.com/comments
,#+end_src

,#+begin_src dsq :input comments
SELECT
    email,
    substr(name, 0, 32) AS name
FROM {}
WHERE email LIKE 'f%'
ORDER BY email
LIMIT 5
,#+end_src

#+RESULTS:
| email                         | name                            |
|-------------------------------+---------------------------------|
| Fanny@danial.com              | deleniti facere tempore et pers |
| Faustino.Keeling@morris.co.uk | rerum voluptate dolor           |
| Felton_Huel@terrell.biz       | ratione architecto in est volup |
| Ferne_Bogan@angus.info        | dicta deserunt tempore          |
| Francesco.Gleason@nella.us    | doloribus quibusdam molestiae a |
#+end_src
